<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>$schema</key>
	<string>https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json</string>
	<key>fileTypes</key>
	<array>
		<string>gp</string>
		<string>pari</string>
		<string>parigp</string>
	</array>
	<key>name</key>
	<string>PARI/GP</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#code</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>braces</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.group.begin.parigp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.group.end.parigp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.parigp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#code</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.brackets.begin.parigp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.brackets.end.parigp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.brackets.parigp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>[,;]</string>
							<key>name</key>
							<string>markup.punctuation.separator.parigp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#code</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>code</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#functions</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.begin.parigp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.end.parigp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parens.parigp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#code</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#meta-commands</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-hints</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#general</string>
				</dict>
				<dict>
					<key>match</key>
					<string>'?\b[[:alpha:]][[:alnum:]_]*</string>
					<key>name</key>
					<string>variable.name.parigp</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#inline</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.parigp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.parigp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.parigp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>inline</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.parigp</string>
								</dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>comment.line.double-slash.parigp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(\\\\).*$\n?</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#builtins</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#user-defined</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>builtins</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.builtins.parigp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(Col|Colrev|List|Map|Mat|Mod|O|Pol|Polrev|Qfb|Ser|Set|Str|Strchr|Strexpand|Strprintf|Strtex|Vec|Vecrev|Vecsmall|abs|acos|acosh|addhelp|addprimes|agm|airy|alarm|algadd|algalgtobasis|algaut|algb|algbasis|algbasistoalg|algcenter|algcentralproj|algchar|algcharpoly|algdegree|algdep|algdim|algdisc|algdivl|algdivr|alggroup|alggroupcenter|alghasse|alghassef|alghassei|algindex|alginit|alginv|alginvbasis|algisassociative|algiscommutative|algisdivision|algisdivl|algisinv|algisramified|algissemisimple|algissimple|algissplit|alglatadd|alglatcontains|alglatelement|alglathnf|alglatindex|alglatinter|alglatlefttransporter|alglatmul|alglatrighttransporter|alglatsubset|algmakeintegral|algmul|algmultable|algneg|algnorm|algpoleval|algpow|algprimesubalg|algquotient|algradical|algramifiedplaces|algrandom|algrelmultable|algsimpledec|algsplit|algsplittingdata|algsplittingfield|algsqr|algsub|algsubalg|algtableinit|algtensor|algtomatrix|algtrace|algtype|alias|apply|arg|arity|asin|asinh|asympnum|asympnumraw|atan|atanh|bernfrac|bernpol|bernreal|bernvec|besselh1|besselh2|besseli|besselj|besseljh|besseljzero|besselk|besseln|bessely|besselyzero|bestappr|bestapprPade|bestapprnf|bezout|bezoutres|bigomega|binary|binomial|bitand|bitneg|bitnegimply|bitor|bitprecision|bittest|bitxor|bnfcertify|bnfdecodemodule|bnfinit|bnfisintnorm|bnfisnorm|bnfisprincipal|bnfissunit|bnfisunit|bnflog|bnflogdegree|bnflogef|bnfnarrow|bnfsignunit|bnfsunit|bnfunits|bnrL1|bnrchar|bnrclassfield|bnrclassno|bnrclassnolist|bnrcompositum|bnrconductor|bnrconductorofchar|bnrdisc|bnrdisclist|bnrgaloisapply|bnrgaloismatrix|bnrinit|bnrisconductor|bnrisgalois|bnrisprincipal|bnrmap|bnrrootnumber|bnrstark|call|ceil|centerlift|characteristic|charconj|chardiv|chareval|chargalois|charker|charmul|charorder|charpoly|charpow|chinese|cmp|component|concat|conj|conjvec|content|contfrac|contfraceval|contfracinit|contfracpnqn|core|coredisc|cos|cosh|cotan|cotanh|dbg_err|dbg_x|denominator|deriv|derivn|diffop|digits|dilog|dirdiv|dirmul|dirpowers|dirpowerssum|dirzetak|divisors|divisorslenstra|divrem|eint1|ell2cover|ellE|ellK|ellL1|elladd|ellak|ellan|ellanalyticrank|ellap|ellbil|ellbsd|ellcard|ellchangecurve|ellchangepoint|ellchangepointinv|ellconvertname|elldivpol|elleisnum|elleta|ellformaldifferential|ellformalexp|ellformallog|ellformalpoint|ellformalw|ellfromeqn|ellfromj|ellgenerators|ellglobalred|ellgroup|ellheegner|ellheight|ellheightmatrix|ellidentify|ellinit|ellintegralmodel|ellisdivisible|ellisogeny|ellisogenyapply|ellisomat|ellisoncurve|ellisotree|ellissupersingular|ellj|elllocalred|elllog|elllseries|ellminimaldisc|ellminimalmodel|ellminimaltwist|ellmoddegree|ellmodulareqn|ellmul|ellneg|ellnonsingularmultiple|ellorder|ellordinate|ellpadicL|ellpadicbsd|ellpadicfrobenius|ellpadicheight|ellpadicheightmatrix|ellpadiclambdamu|ellpadiclog|ellpadicregulator|ellpadics2|ellperiods|ellpointtoz|ellpow|ellrank|ellrankinit|ellratpoints|ellrootno|ellsaturation|ellsea|ellsearch|ellsigma|ellsub|elltamagawa|elltaniyama|elltatepairing|elltors|elltrace|elltwist|ellweilcurve|ellweilpairing|ellwp|ellxn|ellzeta|ellztopoint|erfc|errname|eta|eulerfrac|eulerianpol|eulerphi|eulerpol|eulerreal|eulervec|eval|exp|expm1|exponent|exportall|extern|externstr|factor|factorback|factorcantor|factorff|factorial|factorint|factormod|factormodDDF|factormodSQF|factormodcyclo|factornf|factorpadic|ffcompomap|ffembed|ffextend|fffrobenius|ffgen|ffinit|ffinvmap|fflog|ffmap|ffmaprel|ffnbirred|fforder|ffprimroot|fft|fftinv|fibonacci|fileclose|fileextern|fileflush|fileopen|fileread|filereadstr|filewrite|filewrite1|floor|fold|frac|fromdigits|galoischardet|galoischarpoly|galoischartable|galoisconjclasses|galoisexport|galoisfixedfield|galoisgetgroup|galoisgetname|galoisgetpol|galoisidentify|galoisinit|galoisisabelian|galoisisnormal|galoispermtopol|galoissplittinginit|galoissubcyclo|galoissubfields|galoissubgroups|gamma|gammah|gammamellininv|gammamellininvasymp|gammamellininvinit|gcd|gcdext|gcharalgebraic|gcharconductor|gcharduallog|gchareval|gcharidentify|gcharinit|gcharisalgebraic|gcharlog|gcharnewprec|genus2red|getabstime|getcache|getenv|getheap|getlocalbitprec|getlocalprec|getrand|getstack|gettime|getwalltime|halfgcd|hammingweight|harmonic|hgmalpha|hgmbydegree|hgmcoef|hgmcoefs|hgmcyclo|hgmeulerfactor|hgmgamma|hgminit|hgmissymmetrical|hgmparams|hgmtwist|hilbert|hyperellchangecurve|hyperellcharpoly|hyperelldisc|hyperellisoncurve|hyperellminimaldisc|hyperellminimalmodel|hyperellpadicfrobenius|hyperellratpoints|hyperellred|hypergeom|hyperu|idealadd|idealaddtoone|idealappr|idealchinese|idealcoprime|idealdiv|idealdown|idealfactor|idealfactorback|idealfrobenius|idealhnf|idealintersect|idealinv|idealismaximal|idealispower|ideallist|ideallistarch|ideallog|idealmin|idealmul|idealnorm|idealnumden|idealpow|idealprimedec|idealprincipalunits|idealramgroups|idealred|idealredmodpower|idealstar|idealtwoelt|idealval|if|imag|incgam|incgamc|install|intformal|intnumgaussinit|intnuminit|isfundamental|ispolygonal|ispower|ispowerful|isprime|isprimepower|ispseudoprime|ispseudoprimepower|issquare|issquarefree|istotient|kill|kronecker|lambertw|laurentseries|lcm|length|lerchphi|lerchzeta|lex|lfun|lfunabelianrelinit|lfunan|lfunartin|lfuncheckfeq|lfunconductor|lfuncost|lfuncreate|lfundiv|lfundual|lfunetaquo|lfuneuler|lfungenus2|lfunhardy|lfunhgm|lfuninit|lfunlambda|lfunmf|lfunmfspec|lfunmul|lfunorderzero|lfunparams|lfunqf|lfunrootres|lfunshift|lfunsympow|lfuntheta|lfunthetacost|lfunthetainit|lfuntwist|lfunzeros|lift|liftall|liftint|liftpol|limitnum|lindep|listcreate|listinsert|listkill|listpop|listput|listsort|lngamma|localbitprec|localprec|log|log1p|logint|mapdelete|mapget|mapisdefined|mapput|matadjoint|matalgtobasis|matbasistoalg|matcompanion|matconcat|matdet|matdetint|matdetmod|matdiagonal|mateigen|matfrobenius|mathess|mathilbert|mathnf|mathnfmod|mathnfmodid|mathouseholder|matid|matimage|matimagecompl|matimagemod|matindexrank|matintersect|matinverseimage|matinvmod|matisdiagonal|matker|matkerint|matkermod|matmuldiagonal|matmultodiagonal|matpascal|matpermanent|matqr|matrank|matreduce|matrix|matrixqz|matsize|matsnf|matsolve|matsolvemod|matsupplement|mattranspose|max|mfDelta|mfEH|mfEk|mfTheta|mfatkin|mfatkineigenvalues|mfatkininit|mfbasis|mfbd|mfbracket|mfcoef|mfcoefs|mfconductor|mfcosets|mfcuspisregular|mfcusps|mfcuspval|mfcuspwidth|mfderiv|mfderivE2|mfdescribe|mfdim|mfdiv|mfeigenbasis|mfeigensearch|mfeisenstein|mfembed|mfeval|mffields|mffromell|mffrometaquo|mffromlfun|mffromqf|mfgaloisprojrep|mfgaloistype|mfhecke|mfheckemat|mfinit|mfisCM|mfisequal|mfisetaquo|mfkohnenbasis|mfkohnenbijection|mfkohneneigenbasis|mflinear|mfmanin|mfmul|mfnumcusps|mfparams|mfperiodpol|mfperiodpolbasis|mfpetersson|mfpow|mfsearch|mfshift|mfshimura|mfslashexpansion|mfspace|mfsplit|mfsturm|mfsymbol|mfsymboleval|mftaylor|mftobasis|mftocoset|mftonew|mftraceform|mftwist|min|minpoly|modreverse|moebius|msatkinlehner|mscosets|mscuspidal|msdim|mseisenstein|mseval|msfarey|msfromcusp|msfromell|msfromhecke|msgetlevel|msgetsign|msgetweight|mshecke|msinit|msissymbol|mslattice|msnew|msomseval|mspadicL|mspadicinit|mspadicmoments|mspadicseries|mspathgens|mspathlog|mspetersson|mspolygon|msqexpansion|mssplit|msstar|mstooms|newtonpoly|nextprime|nfalgtobasis|nfbasis|nfbasistoalg|nfcertify|nfcompositum|nfdetint|nfdisc|nfdiscfactors|nfeltadd|nfeltdiv|nfeltdiveuc|nfeltdivmodpr|nfeltdivrem|nfeltembed|nfeltispower|nfeltissquare|nfeltmod|nfeltmul|nfeltmulmodpr|nfeltnorm|nfeltpow|nfeltpowmodpr|nfeltreduce|nfeltreducemodpr|nfeltsign|nfelttrace|nfeltval|nffactor|nffactorback|nffactormod|nfgaloisapply|nfgaloisconj|nfgrunwaldwang|nfhilbert|nfhnf|nfhnfmod|nfinit|nfisideal|nfisincl|nfisisom|nfislocalpower|nfkermodpr|nflist|nfmodpr|nfmodprinit|nfmodprlift|nfnewprec|nfpolsturm|nfresolvent|nfroots|nfrootsof1|nfsnf|nfsolvemodpr|nfsplitting|nfsubfields|nfsubfieldscm|nfsubfieldsmax|norm|norml2|normlp|numbpart|numdiv|numerator|numtoperm|omega|padicappr|padicfields|padicprec|parapply|pareval|parselect|partitions|permcycles|permorder|permsign|permtonum|plotbox|plotclip|plotcolor|plotcopy|plotcursor|plotdraw|plotexport|plothraw|plothrawexport|plothsizes|plotinit|plotkill|plotlines|plotlinetype|plotmove|plotpoints|plotpointsize|plotpointtype|plotrbox|plotrecthraw|plotrline|plotrmove|plotrpoint|plotscale|plotstring|polchebyshev|polclass|polcoef|polcoeff|polcompositum|polcyclo|polcyclofactors|poldegree|poldisc|poldiscfactors|poldiscreduced|polgalois|polgraeffe|polhensellift|polhermite|polinterpolate|poliscyclo|poliscycloprod|polisirreducible|pollaguerre|pollead|pollegendre|polmodular|polrecip|polred|polredabs|polredbest|polredord|polresultant|polresultantext|polroots|polrootsbound|polrootsff|polrootsmod|polrootspadic|polrootsreal|polsturm|polsubcyclo|polsubcyclofast|polsylvestermatrix|polsym|poltchebi|polteichmuller|poltomonic|poltschirnhaus|polylog|polylogmult|polzagier|powers|precision|precprime|prime|primecert|primecertexport|primecertisvalid|primepi|primes|print|print1|printf|printp|printsep|printsep1|printtex|prodeulerrat|prodnumrat|psdraw|psi|psplothraw|qfauto|qfautoexport|qfbclassno|qfbcomp|qfbcompraw|qfbcornacchia|qfbhclassno|qfbil|qfbnucomp|qfbnupow|qfbpow|qfbpowraw|qfbprimeform|qfbred|qfbredsl2|qfbsolve|qfeval|qfgaussred|qfisom|qfisominit|qfjacobi|qflll|qflllgram|qfminim|qfminimize|qfnorm|qforbits|qfparam|qfperfection|qfrep|qfsign|qfsolve|quadclassunit|quaddisc|quadgen|quadhilbert|quadpoly|quadray|quadregulator|quadunit|quadunitindex|quadunitnorm|ramanujantau|random|randomprime|read|readstr|readvec|real|removeprimes|rnfalgtobasis|rnfbasis|rnfbasistoalg|rnfcharpoly|rnfconductor|rnfdedekind|rnfdet|rnfdisc|rnfeltabstorel|rnfeltdown|rnfeltnorm|rnfeltreltoabs|rnfelttrace|rnfeltup|rnfequation|rnfhnfbasis|rnfidealabstorel|rnfidealdown|rnfidealfactor|rnfidealhnf|rnfidealmul|rnfidealnormabs|rnfidealnormrel|rnfidealprimedec|rnfidealreltoabs|rnfidealtwoelt|rnfidealup|rnfinit|rnfisabelian|rnfisfree|rnfislocalcyclo|rnfisnorm|rnfisnorminit|rnfkummer|rnflllgram|rnfnormgroup|rnfpolred|rnfpolredabs|rnfpolredbest|rnfpseudobasis|rnfsteinitz|rootsof1|round|select|self|seralgdep|serchop|serconvol|serdiffdep|serlaplace|serprec|serreverse|setbinop|setdebug|setdelta|setintersect|setisset|setminus|setrand|setsearch|setunion|shift|shiftmul|sigma|sign|simplify|sin|sinc|sinh|sizebyte|sizedigit|snfrank|sqr|sqrt|sqrtint|sqrtn|sqrtnint|stirling|strchr|strexpand|strjoin|strprintf|strsplit|strtex|strtime|subcyclohminus|subcycloiwasawa|subcyclopclgp|subgrouplist|subst|substpol|substvec|sumdedekind|sumdigits|sumeulerrat|sumformal|sumnumapinit|sumnuminit|sumnumlagrangeinit|sumnummonieninit|sumnumrat|system|tan|tanh|taylor|teichmuller|theta|thetanullk|thue|thueinit|trace|trap|truncate|type|unexportall|valuation|varhigher|variable|variables|varlower|vecextract|vecmax|vecmin|vecprod|vecsearch|vecsort|vecsum|vector|vectorsmall|vectorv|version|warning|weber|whatnow|write|write1|writebin|writetex|zeta|zetahurwitz|zetamult|zetamultall|zetamultconvert|zetamultdual|znchar|zncharconductor|znchardecompose|znchargauss|zncharinduce|zncharisodd|znchartokronecker|znchartoprimitive|znconreychar|znconreyconductor|znconreyexp|znconreylog|zncoppersmith|znlog|znorder|znprimroot|znstar|znsubgroupgenerators)\b\s*(?={|\()</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>constant.language.parigp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(Catalan|Euler|I|Pi|oo)\b\s*(\(\)|\{\}|\(\{\}\)|\{\(\)\})?</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.parigp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(allocatemem|break|breakpoint|dbg_down|dbg_up|default|derivnum|direuler|error|export|for|forcomposite|fordiv|fordivfactored|foreach|forell|forfactored|forpart|forperm|forprime|forprimestep|forqfvec|forsquarefree|forstep|forsubgroup|forsubset|forvec|gcharlocal|global|iferr|inline|input|intcirc|intfuncinit|intnum|intnumgauss|intnumosc|intnumromb|local|my|next|parfor|parforeach|parforprime|parforprimestep|parforvec|parploth|parplothexport|parsum|parvector|plot|ploth|plothexport|plotrecth|prod|prodeuler|prodinf|psploth|quit|return|solve|solvestep|sum|sumalt|sumdiv|sumdivmult|suminf|sumnum|sumnumap|sumnumlagrange|sumnummonien|sumnumsidi|sumpos|unexport|uninline|until|while)\b</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.member.builtins.parigp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\.(b2|b3|b4|b5|b6|b7|b8|codiff|c4|c5|c6|eta|f|area|a1|a2|a3|a4|a5|a6|bid|bnf|clgp|cyc|diff|disc|e|fu|gen|group|index|j|mod|nf|no|omega|orders|p|pol|polabs|r1|r2|reg|roots|sign|t2|tate|tu|zk|zkst)\b</string>
						</dict>
					</array>
				</dict>
				<key>user-defined</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>([[:alpha:]][[:alnum:]_]*)\b(?=(\s*\(|\(\s*\{|\{\s*\()[^=]*=)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.user.parigp</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?&lt;=\=)</string>
							<key>name</key>
							<string>meta.function.parigp</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#function-vars</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>([[:alpha:]][[:alnum:]_]*)\b(?=\s*=\s*(\(([^()]|(\g&lt;2&gt;))*\)|[[:alpha:]][[:alnum:]_]*)\s*\-\s*&gt;)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.user.lambda.parigp</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?&lt;=\-&gt;)</string>
							<key>name</key>
							<string>meta.function.lambda.parigp</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#function-vars</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(\(([^()]|(\g&lt;0&gt;))*\)|[[:alpha:]][[:alnum:]_]*|\{.+\})(?=\s*\-\s*&gt;)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.user.lambda.anonymous.parigp</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#function-vars</string>
										</dict>
									</array>
								</dict>
							</dict>
							<key>end</key>
							<string>(?&lt;=\-&gt;)</string>
							<key>name</key>
							<string>meta.function.lambda.anonymous.parigp</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#general</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#operators</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\.([[:alpha:]][[:alnum:]_]*)\b(?=[^=]*=)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.function.user.member.parigp</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?&lt;=\=)</string>
							<key>name</key>
							<string>meta.function.user.member.parigp</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#general</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#operators</string>
								</dict>
							</array>
						</dict>
					</array>
					<key>repository</key>
					<dict>
						<key>function-vars</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\(</string>
									<key>beginCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.parens.begin.parigp</string>
										</dict>
									</dict>
									<key>end</key>
									<string>\)</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.section.parens.end.parigp</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.parens.parigp</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#function-vars</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#general</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literals</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#operators</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#type-hints</string>
								</dict>
								<dict>
									<key>match</key>
									<string>(?&lt;!:\s*)([[:alpha:]][[:alnum:]_]*)\s*</string>
									<key>name</key>
									<string>variable.parameter.function.parigp</string>
								</dict>
								<dict>
									<key>begin</key>
									<string>(\{)</string>
									<key>beginCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>meta.function.parameter.optional.begin.parigp</string>
										</dict>
									</dict>
									<key>end</key>
									<string>(\})</string>
									<key>endCaptures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>meta.function.parameter.optional.end.parigp</string>
										</dict>
									</dict>
									<key>name</key>
									<string>meta.function.parameter.optional.parigp</string>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#function-vars</string>
										</dict>
									</array>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
			</dict>
		</dict>
		<key>general</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>;</string>
					<key>name</key>
					<string>markup.punctuation.statement-terminator.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>:</string>
					<key>name</key>
					<string>markup.annotation.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>markup.punctuation.separator.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\s</string>
					<key>name</key>
					<string>constant.character.whitespace.parigp</string>
				</dict>
			</array>
		</dict>
		<key>literals</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>numeric</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\b(0(x|X)[0-9A-Fa-f]*)\b</string>
							<key>name</key>
							<string>constant.numeric.hex.parigp</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b(0(b|B)[0-1]*)\b</string>
							<key>name</key>
							<string>constant.numeric.bin.parigp</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([0-9]*\.[0-9]*\s*([eE][+-]?[0-9]+)?)\b</string>
							<key>name</key>
							<string>constant.numeric.float.parigp</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\b([0-9]+)\b</string>
							<key>name</key>
							<string>constant.numeric.int.parigp</string>
						</dict>
					</array>
				</dict>
				<key>string</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>"(.*)"</string>
							<key>name</key>
							<string>constant.character.escape.parigp</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>meta-commands</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.parigp</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(##(?!\b)|#(?!\b)|\\B |\\ |\\a |\\c |\\d |\\e |\\g |\\gf|\\gm|\\h |\\l |\\m |\\o |\\p |\\pb|\\ps|\\q |\\r |\\s |\\t |\\u |\\um |\\v |\\w |\\x |\\y )</string>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.factorial.parigp</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(!)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(&amp;&amp;|\|\|)|(!)\b</string>
					<key>name</key>
					<string>keyword.operator.logical.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!&amp;)(&amp;)</string>
					<key>name</key>
					<string>keyword.operator.pointer.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(&lt;&lt;|&gt;&gt;)</string>
					<key>name</key>
					<string>keyword.operator.shift.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(&lt;=|&gt;=|&lt;|(?&lt;!\-)&gt;|!=)</string>
					<key>name</key>
					<string>keyword.operator.comparison.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-&gt;)</string>
					<key>name</key>
					<string>keyword.operator.lambda</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(=)</string>
					<key>name</key>
					<string>keyword.operator.assignment.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-\-|\+\+)</string>
					<key>name</key>
					<string>keyword.operator.increment-decrement.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\+=|\-=|\*=|\/=|\\=|&lt;&lt;=|&gt;&gt;=)</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.assign.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\-|\+|\*|\^|\/|\\|\\/|%)</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\.\.)</string>
					<key>name</key>
					<string>keyword.operator.range.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\~)</string>
					<key>name</key>
					<string>keyword.operator.transpose.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\')(?!\b)</string>
					<key>name</key>
					<string>keyword.operator.derivative.parigp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\#)\b\s*(?!$)</string>
					<key>name</key>
					<string>keyword.operator.cardinality.parigp</string>
				</dict>
			</array>
		</dict>
		<key>parens</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.begin.parigp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.parens.end.parigp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parens.parigp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parens</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>type-hints</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.type.parigp</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\s*\b(t_CLOSURE|t_COL|t_COMPLEX|t_ERROR|t_FFELT|t_FRAC|t_INFINITY|t_INT|t_INTMOD|t_LIST|t_MAT|t_PADIC|t_POL|t_POLMOD|t_QFB|t_QUAD|t_REAL|t_RFRAC|t_SER|t_STR|t_VEC|t_VECSMALL)\b</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.parigp</string>
</dict>
</plist>
